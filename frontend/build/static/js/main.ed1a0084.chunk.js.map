{"version":3,"sources":["components/Header.js","components/Figure.js","components/WrongLetters.js","components/Word.js","helpers/helpers.js","components/Popup.js","components/Notification.js","components/Score.js","components/Instructions.js","components/GuestLogin.js","components/EmployeeLogin.js","App.js","index.js"],"names":["header","currentQuestion","words","wordsLoaded","length","Figure","errors","wrongLetters","height","width","className","x1","y1","x2","y2","cx","cy","r","WrongLetters","map","letter","i","reduce","prev","curr","Word","selectedWord","correctLetters","split","includes","showNotification","setter","setTimeout","checkWin","correct","wrong","word","status","forEach","Popup","user","setPlayable","playAgain","score","setScore","quitGame","finalMessage","finalMessageRevealWord","playable","gameOver","isWin","useEffect","new_score","isGuest","as_guest","attempt_no","scoreDetails","id","guest_id","emp_id","fetch","method","headers","body","JSON","stringify","then","response","json","data","console","log","toUpperCase","style","display","onClick","Notification","Score","Instructions","GuestLogin","Login","changeView","useState","details","setDetails","onSubmit","e","preventDefault","htmlFor","required","type","placeholder","onChange","name","target","value","EmployeeLogin","email","App","setWrongLetters","setCorrectLetters","setShowNotification","setCurrentQuestion","setWords","layout","setLayout","keyboard","useRef","setWordsLoaded","setUser","userDetails","Header","keyboardRef","current","layoutName","onKeyPress","key","keyCode","charCodeAt","toLowerCase","show","handleInput","nextQuestion","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.ed1a0084.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst header = ({currentQuestion,words,wordsLoaded}) =>{\r\n    return (\r\n        <>\r\n                <h1>Hangman</h1>\r\n                <p>Find the hidden word - Enter a letter</p>\r\n                <p>Question {currentQuestion + 1}/{words.length}</p>\r\n                {(!wordsLoaded)?<p>Loading your words...</p> : false}\r\n        </>\r\n    );\r\n}\r\n\r\nexport default header;","import React from 'react';\r\n\r\nconst Figure = ({wrongLetters}) =>{\r\n\r\n    const errors = wrongLetters.length;\r\n\r\n    return (\r\n        <svg height=\"250\" width=\"200\" className=\"figure-container\">\r\n \r\n            {/*Rod*/}\r\n            <line x1=\"60\" y1=\"20\" x2=\"140\" y2=\"20\" />\r\n            <line x1=\"140\" y1=\"20\" x2=\"140\" y2=\"50\" />\r\n            <line x1=\"60\" y1=\"20\" x2=\"60\" y2=\"230\" />\r\n            <line x1=\"20\" y1=\"230\" x2=\"100\" y2=\"230\" />\r\n\r\n            {/*Head*/}\r\n            { errors>0 && <circle cx=\"140\" cy=\"70\" r=\"20\" />}\r\n\r\n            {/*Body*/}\r\n            { errors>1 && <line x1=\"140\" y1=\"90\" x2=\"140\" y2=\"150\"  />}\r\n\r\n            {/*Arms */}\r\n            { errors>2 && <line x1=\"140\" y1=\"120\" x2=\"120\" y2=\"100\"  />}\r\n            { errors>3 && <line x1=\"140\" y1=\"120\" x2=\"160\" y2=\"100\"  />}\r\n\r\n            {/*Legs*/}\r\n            { errors>4 && <line x1=\"140\" y1=\"150\" x2=\"120\" y2=\"180\"  />}\r\n            { errors>5 && <line x1=\"140\" y1=\"150\" x2=\"160\" y2=\"180\"  />}\r\n\r\n      </svg>\r\n      );\r\n}\r\n\r\nexport default Figure;","import React from 'react'\r\n\r\nconst WrongLetters = ({wrongLetters}) => {\r\n    return (\r\n        <div className=\"wrong-letters-container\">\r\n            <div>\r\n            {wrongLetters.length > 0 && <p className=\"Wrong\">Wrong</p>}\r\n            {wrongLetters\r\n                .map( (letter,i) =>  <span key={i}>{letter}</span>)\r\n                .reduce((prev,curr) => prev === null ? [curr] : [prev,', ',curr], null)}\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default WrongLetters;\r\n","import React from 'react'\r\n\r\nconst Word = ({selectedWord,correctLetters}) => {\r\n    return (\r\n        <div className=\"word\">\r\n            {selectedWord.split('').map( (letter,i) => {\r\n                return (\r\n                    <span className=\"letter\" key ={i}>\r\n                        {correctLetters.includes(letter) ? letter : ''}\r\n                    </span>\r\n                )\r\n            })}\r\n        </div>    \r\n    );\r\n}\r\n\r\nexport default Word;\r\n","export function showNotification(setter){\r\n    setter(true);\r\n    setTimeout(() => {\r\n        setter(false);\r\n    }, 2000);\r\n}\r\n\r\nexport function checkWin(correct, wrong, word){\r\n    let status = 'win';\r\n\r\n    //check for win\r\n    word.split('').forEach(letter=>{\r\n        if(!correct.includes(letter)){\r\n            status = '';\r\n        }\r\n    });\r\n\r\n    //check for loss\r\n    if (wrong.length === 6)\r\n        status = 'lose';\r\n    \r\n    return status;\r\n}","import React, {useEffect,useState} from 'react';\r\nimport {checkWin} from '../helpers/helpers';\r\n\r\nlet check = false;\r\n\r\nconst Popup = ({user,correctLetters,wrongLetters,setPlayable,selectedWord, playAgain, currentQuestion, words, score, setScore, quitGame}) => {\r\n\r\n    let finalMessage = '';\r\n    let finalMessageRevealWord = '';\r\n    let playable = true;\r\n    let gameOver = false;\r\n\r\n    const isWin = (((checkWin(correctLetters,wrongLetters,selectedWord) === 'win') && (currentQuestion < words.length -1)) || ((checkWin(correctLetters,wrongLetters,selectedWord) === 'win') && (currentQuestion === words.length -1 )));\r\n\r\n    useEffect(() => {\r\n\r\n        if (isWin) {\r\n\r\n            check = true;\r\n\r\n            // updating score in database\r\n            let new_score = score + 1;\r\n\r\n            setScore((score) => score + 1);          \r\n\r\n            let id = NaN;\r\n            let isGuest = user.as_guest;\r\n            let attempt_no = user.attempt_no;\r\n\r\n            if(user.as_guest === true)\r\n                id = user.guest_id;\r\n            else\r\n                id = user.emp_id;\r\n\r\n            const scoreDetails={\r\n                new_score,\r\n                id,\r\n                isGuest,\r\n                attempt_no\r\n            };\r\n\r\n            const response = fetch('/update_score',{\r\n                method: \"POST\",\r\n                headers: {\r\n                    \"Content-Type\":\"application/json\"\r\n                },\r\n                body: JSON.stringify(scoreDetails)\r\n            }).then(response=>response.json().then(data=>{                                    \r\n                console.log('Recieved Status: ',data['status']);\r\n            }));\r\n\r\n        }\r\n      }, [isWin, setScore]);\r\n\r\n\r\n    if ((checkWin(correctLetters,wrongLetters,selectedWord) === 'win') && (currentQuestion < words.length -1)){\r\n        finalMessage = 'Congratulations, you guessed it right!';\r\n        playable = false;\r\n    } else if ((checkWin(correctLetters,wrongLetters,selectedWord) === 'lose') && (currentQuestion < words.length -1)){\r\n        finalMessage = 'Unfortunately, you could not guess it.';\r\n        finalMessageRevealWord = `... the word was ${selectedWord.toUpperCase()}`;\r\n        playable = false;\r\n    } else if ( (checkWin(correctLetters,wrongLetters,selectedWord) === 'lose') && (currentQuestion === words.length -1)){\r\n        finalMessage = 'Unfortunately, you could not guess it.';\r\n        finalMessageRevealWord = `... the word was ${selectedWord.toUpperCase()}, You scored ${score} out of ${words.length}`;\r\n        gameOver = true;\r\n        playable = false;\r\n    }else if((checkWin(correctLetters,wrongLetters,selectedWord) === 'win') && (currentQuestion === words.length -1 )){\r\n        finalMessage = 'Congratulations, you guessed it right!';\r\n        finalMessageRevealWord = `You scored ${score} out of ${words.length}`;\r\n        gameOver = true;\r\n        playable = false;\r\n    }\r\n\r\n    useEffect(() => {\r\n        setPlayable(playable)\r\n        if(playable)\r\n            check = false;\r\n        else\r\n            check = true;\r\n    });\r\n\r\n    return (\r\n        <div className=\"popup-container\" style={finalMessage !== '' ? {display:'flex'} : {}} >\r\n            <div className=\"popup\">\r\n                <h2 className=\"popup_word\">{finalMessage}</h2>\r\n                <h3 className=\"popup_word\">{finalMessageRevealWord}</h3>\r\n                <button onClick={() => playAgain(gameOver)}>{(!gameOver)?\"Next Word\":\"Start Over\"}</button><br/>\r\n                {gameOver === true ? <button onClick={()=> quitGame()}>Quit</button> : false}\r\n            </div>\r\n         </div>    \r\n    );\r\n}\r\n\r\nexport default Popup;\r\n","import React from 'react'\r\n\r\nconst Notification = ({showNotification}) => {\r\n    return (\r\n        <div className= {`notification-container ${showNotification ? 'show' : ''}`} >\r\n          <p>You have already entered this letter</p>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Notification;\r\n","import React from 'react'\r\n\r\nconst Score = ({score,words}) => {\r\n    return (\r\n        <div >\r\n            <p>Score {score}/{words.length}</p>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Score;\r\n","import React from 'react'\r\n\r\nconst Instructions = () => {\r\n    return (\r\n        <div className=\"Instructions-Page\">\r\n            <h1 className=\"input-label\">Instructions</h1>\r\n            <p style={{'color':'red'}}>Carefully read the following instructions.</p>\r\n            <ol>\r\n                <li className=\"instructions\">1. Enter your PTCL Email as well as Employee ID correctly below.</li>\r\n                <li className=\"instructions\">2. There are 5 words and you will have 6 attempts to guess each word correctly.</li>\r\n                <li className=\"instructions\">3. Your first attempt will be considered only.</li>\r\n                <li className=\"instructions\">4. Incase you refresh or quit the page, your progress uptil that point will be considered.</li>\r\n            </ol>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Instructions;\r\n","import React,{useState} from 'react'\r\n\r\nconst GuestLogin = ({Login,changeView}) => {\r\n\r\n    const [details,setDetails] = useState({\"email\":\"\",\"emp_id\":\"\",\"attempt_no\":\"\",\"as_guest\":false,\"name\":\"\",\"guest_id\":\"\"});\r\n\r\n    const SubmitHandler = e =>{\r\n        e.preventDefault();\r\n        Login(details);\r\n    }\r\n\r\n    return (\r\n    <div >\r\n        <form onSubmit={SubmitHandler}>\r\n            <div className=\"form\">\r\n                <div className=\"form-input\" >\r\n                    <label className=\"input-label\" htmlFor=\"Name\">Name:</label><br/><br/>\r\n                    <input required className=\"inputbox\" type=\"text\" placeholder=\"Your Full Name...\" onChange={e=> setDetails({...details,name:e.target.value})}  value={details.name} />\r\n                </div>\r\n                <button className=\"submit-button\" onClick={()=>setDetails({...details,as_guest:true})} type=\"submit\">Play</button>\r\n            </div>\r\n        </form>\r\n\r\n        <div className=\"form\">\r\n            <h3>OR</h3>\r\n            <button className=\"submit-button\" onClick={()=> changeView(false)} type=\"submit\">Login As Employee</button>\r\n        </div>\r\n    </div>\r\n    )\r\n}\r\n\r\nexport default GuestLogin;\r\n","import React,{useState} from 'react'\r\n\r\nconst EmployeeLogin = ({Login,changeView}) => {\r\n\r\n    const [details,setDetails] = useState({\"email\":\"\",\"emp_id\":\"\",\"attempt_no\":\"\",\"as_guest\":false,\"name\":\"\",\"guest_id\":\"\"});\r\n\r\n    const SubmitHandler = e =>{\r\n        e.preventDefault();\r\n        Login(details);\r\n    }\r\n\r\n    return (\r\n    <div >\r\n        <form onSubmit={SubmitHandler}>\r\n            <div className=\"form\">\r\n                <div className=\"form-input\" >\r\n                    <label className=\"input-label\" htmlFor=\"Email\">Email:</label><br/><br/>\r\n                    <input required className=\"inputbox\" type=\"text\" placeholder=\"e.g John.Doe@ptcl.net.pk\" onChange={e=> setDetails({...details,email:e.target.value})}  value={details.email} />\r\n                </div>\r\n                <div className=\"form-input\">\r\n                    <label className=\"input-label\" htmlFor=\"Employee_ID\">Employee ID:</label><br/><br/>\r\n                    <input required className=\"inputbox\" type=\"text\" placeholder=\"Enter your ID...\" onChange={e=> setDetails({...details,emp_id:e.target.value})}  value={details.emp_id} />\r\n                </div>\r\n                <button className=\"submit-button\" onClick={()=>setDetails({...details,as_guest:false})} type=\"submit\">Play</button>\r\n            </div>\r\n        </form>\r\n\r\n        <div className=\"form\">\r\n            <h3>OR</h3>\r\n            <button className=\"submit-button\" onClick={()=> changeView(true)} type=\"submit\">Play As Guest</button>\r\n        </div>\r\n    </div>\r\n    )\r\n}\r\n\r\nexport default EmployeeLogin;\r\n","import './App.css';\r\nimport { useEffect, useState, useRef } from 'react';\r\nimport Header from './components/Header';\r\nimport React from 'react';\r\nimport Figure from './components/Figure';\r\nimport WrongLetters from './components/WrongLetters';\r\nimport Word from './components/Word';\r\nimport {showNotification as show} from './helpers/helpers';\r\nimport Popup from './components/Popup';\r\nimport Notification from './components/Notification';\r\nimport Score from './components/Score';\r\nimport Keyboard from 'react-simple-keyboard';\r\nimport 'react-simple-keyboard/build/css/index.css';\r\nimport Instructions from './components/Instructions';\r\nimport GuestLogin from './components/GuestLogin';\r\nimport EmployeeLogin from './components/EmployeeLogin';\r\n\r\nlet selectedWord = '';\r\n  \r\nfunction App() {\r\n\r\n  const [playable,setPlayable] = useState(true);\r\n  const [wrongLetters,setWrongLetters] = useState([]);\r\n  const [correctLetters,setCorrectLetters] = useState([]);\r\n  const [showNotification,setShowNotification] = useState(false);\r\n  const [currentQuestion, setCurrentQuestion] = useState(0);\r\n  const [score, setScore] = useState(0);\r\n  const [words, setWords] = useState([]);\r\n  const [layout, setLayout] = useState(\"default\");\r\n  const keyboard = useRef();\r\n  const [wordsLoaded,setWordsLoaded] = useState(false);\r\n  const [user,setUser] = useState({\"email\":\"\",\"emp_id\":\"\",\"attempt_no\":\"\",\"as_guest\":false,\"name\":\"\",\"guest_id\":\"\"})\r\n\r\n  const handleShift = () => {\r\n    const newLayoutName = layout === \"default\" ? \"shift\" : \"default\";\r\n    setLayout(newLayoutName);\r\n  };\r\n\r\n  const changeView = (isGuest) => {\r\n    setUser({...user,as_guest:isGuest});\r\n  }\r\n\r\n  const Login = (details) =>{\r\n\r\n      setUser({\r\n        email : details.email,\r\n        emp_id : details.emp_id,\r\n        as_guest : details.as_guest,\r\n        name : details.name\r\n      });\r\n\r\n      let email = details.email;\r\n      let emp_id = details.emp_id;\r\n      let as_guest = details.as_guest;\r\n      let name = details.name;\r\n      let attempt_no = details.attempt_no;\r\n\r\n      const userDetails={\r\n        email,\r\n        emp_id,\r\n        as_guest,\r\n        name,\r\n        attempt_no\r\n      };\r\n\r\n      const response = fetch('/enter_user',{\r\n        method: \"POST\",\r\n        headers: {\r\n            \"Content-Type\":\"application/json\"\r\n        },\r\n        body: JSON.stringify(userDetails)\r\n      }).then(response=>response.json().then(data=>{\r\n\r\n        setUser({...user,\r\n          guest_id:data['id'],\r\n          name : details.name,\r\n          as_guest : details.as_guest,\r\n          email : details.email,\r\n          emp_id : details.emp_id,\r\n          attempt_no : data['attempt_no']\r\n        });\r\n\r\n        setWords(data['words']);\r\n        setWordsLoaded(true);\r\n\r\n      }));\r\n                \r\n  }\r\n\r\n  function handleInput(key){\r\n    const letter = key.toLowerCase();\r\n\r\n    if (selectedWord.includes(letter)) {\r\n      if (!correctLetters.includes(letter)) {\r\n        setCorrectLetters(correctLetters => [...correctLetters, letter])\r\n      } else {\r\n        show(setShowNotification);\r\n      }\r\n    } else {\r\n      if (!wrongLetters.includes(letter)) {\r\n        setWrongLetters(wrongLetters => [...wrongLetters, letter])\r\n      } else {\r\n        show(setShowNotification);\r\n      }\r\n    }\r\n  }\r\n\r\n  const onKeyPress = key => {\r\n    let keyCode = key.toUpperCase().charCodeAt();\r\n\r\n    console.log(user.name);\r\n\r\n    if (key === \"{shift}\" || key === \"{lock}\") handleShift();\r\n\r\n    else if(playable && keyCode >= 65 && keyCode <= 90) \r\n      handleInput(key);\r\n  };\r\n    \r\n\r\n  useEffect(()=>{\r\n    if(words.length!==0){\r\n      selectedWord = words[currentQuestion];\r\n    }\r\n  },[words])\r\n\r\n  if(words.length!==0){\r\n    selectedWord = words[currentQuestion];\r\n  }\r\n\r\n  const quitGame = () => {\r\n      \r\n    setPlayable(true);\r\n\r\n    setWords([]);\r\n\r\n    setCurrentQuestion(0);\r\n    setScore(0);\r\n\r\n    setCorrectLetters([]);\r\n    setWrongLetters([]);\r\n\r\n    setUser({...user,\r\n      email : \"\",\r\n      emp_id : \"\",\r\n      as_guest : false,\r\n      name : \"\", \r\n      guest_id : \"\",\r\n      attempt_no : \"\"\r\n    });\r\n  }\r\n\r\n  const playAgain = (gameOver) => {\r\n    \r\n    setPlayable(true);\r\n\r\n    if(!gameOver){\r\n      let nextQuestion = currentQuestion + 1;\r\n      if(nextQuestion < words.length){\r\n        selectedWord = words[nextQuestion];\r\n        setCurrentQuestion(nextQuestion);\r\n      }else{\r\n        setCurrentQuestion(nextQuestion);\r\n      }\r\n    }\r\n\r\n    else{\r\n            \r\n      let email = user.email;\r\n      let emp_id = user.emp_id;\r\n      let as_guest = user.as_guest;\r\n      let name = user.name;\r\n\r\n      setWords([]);\r\n      setWordsLoaded(false);\r\n      setUser({attempt_no:\"\"})\r\n\r\n      let attempt_no = \"\";\r\n\r\n      const userDetails={\r\n        email,\r\n        emp_id,\r\n        as_guest,\r\n        name,\r\n        attempt_no\r\n      };\r\n\r\n      const response = fetch('/enter_user',{\r\n        method: \"POST\",\r\n        headers: {\r\n            \"Content-Type\":\"application/json\"\r\n        },\r\n        body: JSON.stringify(userDetails)\r\n      }).then(response=>response.json().then(data=>{\r\n                            \r\n          setUser({...user,\r\n            guest_id : data['id'],\r\n            attempt_no : data['attempt_no']\r\n          });\r\n\r\n          setWords(data['words']);\r\n          setWordsLoaded(true);\r\n\r\n      }));\r\n        setCurrentQuestion(0);\r\n        setScore(0);\r\n    }\r\n      setCorrectLetters([]);\r\n      setWrongLetters([]);\r\n  }\r\n  \r\n  return (\r\n\r\n      (user.email !== \"\" || user.guest_id !== \"\") ? (\r\n      \r\n      <div className=\"App\">\r\n      \r\n        <Header currentQuestion={currentQuestion} words={words} wordsLoaded={wordsLoaded} />\r\n        <WrongLetters wrongLetters={wrongLetters} />\r\n      \r\n        <div className=\"App\">          \r\n      \r\n          <Figure wrongLetters={wrongLetters} />\r\n      \r\n          {(words.length !== 0)? <Word selectedWord={selectedWord} correctLetters={correctLetters} /> : false}\r\n\r\n          {(showNotification)?<Notification showNotification={showNotification}/> : false}\r\n\r\n          {(words.length !== 0)?\r\n            \r\n            <div>\r\n             \r\n              <div className=\"App\">\r\n                <Score score={score} words={words}/>\r\n              </div>\r\n\r\n              <div className=\"Keyboard\">\r\n                <Keyboard keyboardRef={r => (keyboard.current = r)} layoutName={layout} onKeyPress={onKeyPress}/>\r\n              </div>\r\n\r\n              <Popup user={user} correctLetters={correctLetters} wrongLetters={wrongLetters} setPlayable={setPlayable} \r\n              selectedWord={selectedWord} playAgain={playAgain} currentQuestion={currentQuestion} words={words} score={score} setScore={setScore} quitGame={quitGame} />      \r\n            \r\n            </div>\r\n\r\n          :false}    \r\n\r\n        </div>\r\n\r\n      </div>\r\n    ): ( \r\n        <div> \r\n\r\n            { user.emp_id === \"\" && user.guest_id === \"\" ? \r\n              \r\n              <div>\r\n      \r\n                <Instructions /> \r\n      \r\n                { user.as_guest===false  ? \r\n                \r\n                  <div>\r\n                    <EmployeeLogin Login={Login} changeView={changeView} />\r\n                  </div>\r\n                : <GuestLogin Login={Login} changeView={changeView} />\r\n                }\r\n\r\n              </div>\r\n\r\n              : false\r\n            }\r\n\r\n        </div>\r\n      )\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}